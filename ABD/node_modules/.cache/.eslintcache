[{"/Users/liema/Code/React/ABD/ABD/src/index.tsx":"1","/Users/liema/Code/React/ABD/ABD/src/App.tsx":"2","/Users/liema/Code/React/ABD/ABD/src/HomeScreen/HomeScreen.tsx":"3","/Users/liema/Code/React/ABD/ABD/src/ItemView/ItemView.tsx":"4","/Users/liema/Code/React/ABD/ABD/src/Navbar/Navbar.tsx":"5","/Users/liema/Code/React/ABD/ABD/src/Item/Item.tsx":"6","/Users/liema/Code/React/ABD/ABD/src/CategorySuggestion/CategorySuggest.tsx":"7","/Users/liema/Code/React/ABD/ABD/src/CategorySuggestion/Suggestion.tsx":"8"},{"size":485,"mtime":1684243535018,"results":"9","hashOfConfig":"10"},{"size":212,"mtime":1684249477647,"results":"11","hashOfConfig":"10"},{"size":477,"mtime":1684404839242,"results":"12","hashOfConfig":"10"},{"size":1185,"mtime":1684243819977,"results":"13","hashOfConfig":"10"},{"size":945,"mtime":1684406093586,"results":"14","hashOfConfig":"10"},{"size":621,"mtime":1684243271458,"results":"15","hashOfConfig":"10"},{"size":1563,"mtime":1684403385367,"results":"16","hashOfConfig":"10"},{"size":189,"mtime":1684256565129,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"kdafs0",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"/Users/liema/Code/React/ABD/ABD/src/index.tsx",[],[],[],"/Users/liema/Code/React/ABD/ABD/src/App.tsx",[],[],"/Users/liema/Code/React/ABD/ABD/src/HomeScreen/HomeScreen.tsx",[],[],"/Users/liema/Code/React/ABD/ABD/src/ItemView/ItemView.tsx",[],[],"/Users/liema/Code/React/ABD/ABD/src/Navbar/Navbar.tsx",["45","46"],[],"/Users/liema/Code/React/ABD/ABD/src/Item/Item.tsx",["47"],[],"import React from \"react\";\nimport './Item.css';\n\nexport interface ItemProps {\n    img: string;\n    title: string;\n    owner: string;\n    description: string;\n    likes: number;\n}\n\nfunction Item(props: ItemProps) {\n    return ( \n        <div className=\"item-container\">\n            <img \n                src={props.img}\n                className=\"item-image\"\n            />\n            <h5>{props.title}</h5>\n            <p>{props.owner}</p>\n            <p>{props.description}</p>\n            <p>{props.likes}</p>\n        </div>\n     );\n}\n\n// HomeScreen (ItemView) -> ItemView (array Af items) -> Item\nexport default Item;","/Users/liema/Code/React/ABD/ABD/src/CategorySuggestion/CategorySuggest.tsx",["48"],[],"import './CategorySuggest.css';\nimport { CategoryItem } from './Suggestion';\nimport { Suggestion } from './Suggestion';\nconst getCategorySuggestions = async (text: string) : Promise<void> => {\n}\n\nconst SuggestionItems : CategoryItem[]= [\n    {\n        TextDisplay: \"All\"\n    },\n    {\n        TextDisplay: \"Art\"\n    },\n    {\n        TextDisplay: \"Photography\"\n    },\n    {\n        TextDisplay: \"Music\"\n    },\n    {\n        TextDisplay: \"Sport\"\n    }\n]\n\nconst getItems = () => {\n    fetch('http://localhost:3001')\n    .then(response => response.json())\n    .then(data => console.log(data));\n} \n\nfunction createItem() {\n    let name = prompt('Enter merchant name');\n    let email = prompt('Enter merchant email');\n    fetch('http://localhost:3001/item', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({name, email}),\n    })\n      .then(response => {\n        // console.log(\"I am response text \" + response.text());\n        return response.text();\n      })\n      .then(data => {\n        alert(data);\n        // getItems();\n      });\n  }\n\nconst handleGetOnClick = () => {\n    getItems();\n}\n\nconst handlePostOnClick = () => {\n    createItem();\n}\n\n\n\nfunction CategorySuggest() {\n    return (\n        <div className=\"suggestWrapper\">\n            <button onClick={handleGetOnClick}>GET</button>\n            <button onClick={handlePostOnClick}>CREATE</button>\n            {SuggestionItems.map((item) => { return <Suggestion {...item} /> }) }  \n        </div>\n    )\n}\n\nexport default CategorySuggest;","/Users/liema/Code/React/ABD/ABD/src/CategorySuggestion/Suggestion.tsx",[],[],{"ruleId":"49","severity":1,"message":"50","line":29,"column":17,"nodeType":"51","endLine":29,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":30,"column":17,"nodeType":"51","endLine":32,"endColumn":85},{"ruleId":"52","severity":1,"message":"53","line":15,"column":13,"nodeType":"51","endLine":18,"endColumn":15},{"ruleId":"54","severity":1,"message":"55","line":4,"column":7,"nodeType":"56","messageId":"57","endLine":4,"endColumn":29},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","@typescript-eslint/no-unused-vars","'getCategorySuggestions' is assigned a value but never used.","Identifier","unusedVar"]